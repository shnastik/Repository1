

#include  <iostream>		//для использования потоков ввода/вывода


int nTwin=1;			//глобальная переменная
namespace TwinSpace{ int nTwin=2;}	//переменная объявлена в
						//пространстве имен - TwinSpace

#define	  stop do{ } while(0);

int main()
{

 //**********************************************************
	//Задание 1. Работа с отладчиком. Базовые типы данных. Выполняя программу по шагам, 
	//следите за значениями переменных и интерпретируйте результат (помните, что 
	//количество байт, отводимых под int, системо-зависимо).
	//Обратите внимание на разную интерпретацию отладчиком signed и unsigned целых типов 
	//данных, а также на внутреннее представление отрицательных целых чисел.

	
	char cByte = 'A'; // cByte = 65 'A'
	cByte    = 0x42; // cByte = 66 'B'
	cByte    = 66; // cByte = 66 'B'
	cByte    = -1; // cByte = -1 ''   

	unsigned char ucByte = 0x41; // ucByte = 65 'A'
	ucByte   = 'B'; // ucByte = 66 'B'
	ucByte   =	-1; // ucByte = 255 ''

	int iInt =  0xffffffff; // iInt = -1

	unsigned int uiInt = 0xffffffff; // uiInt = 4294967295

	float fFloat = 1.f; // fFloat = 1
	double dDouble = 1.; // dDouble = 1

	// Выполните фрагмент, приведенный далее. В комментариях отразите,
	// что реально заносится в переменную. Объясните разницу между этим 
	// значением и инициализатором.

	double d = 0.1234567890123456789123456789; // d = 0.12345678901234568
	float  f = 0.1234567890123456789123456789; // f = 0.123456791

	d	=	1.; // d = 1
	d	=	0.999999999999999999999999999999999; // d = 1

	stop
	
	// В комментариях напишите результат, возвращаемый оператором sizeof для
	// переменной типа wchar_t (ее размер)
	wchar_t cw = L'Ф'; // cw = 1060 L''
	size_t n = sizeof(cw); // n = 2

	stop


// **************************************************************
	//Задание 2a. Неявное приведение типов данных.
	//Объясните разницу результата при выполнении (1) и (2):
	//Покажите явно (напишите в коде) преобразования, которые неявно выполняет компилятор

	iInt=1;
	double dDouble1=iInt/3;		// (1) dDouble1 = 0; компилятор записывает в переменную целое значение от полученного частного
	double dDouble2=iInt/3.;	// (2) dDouble2 = 0.33333333333333331; компилятор видит, что делитель - вещественное число нецелочисленного формата,
								// и приводит делимое к нецелочисленному формату, чтобы записать в переменную вещественное число


	// Ассоциативность операторов.
	// Синтаксис языка C допускает "цепочечное" присваивание
	// (как в строках (1) и (2)). Посмотрев результаты выполнения строк (1) и (2)
	// (значения переменных dDouble, fFloat, nInt, sShort, cByte), определите порядок 
	// выполения присваиваний при цепочечной записи и объясните результат.
	// Расставте скобки, явно определяющие порядок выполнения, как это сделал бы компилятор.
	// Объясните (в комментариях) предупреждения (warnings) компилятора.

	short sShort;
	dDouble=(fFloat=(iInt=(sShort=(cByte=3.3/3))));			// (1) присваивание выполняется справа налево от cByte
	
	cByte=(sShort=(iInt=(fFloat=(dDouble=3.3/3))));			// (2) присваивание выполняется справа налево от dDouble

	//ниже Вам дан пример "небрежного" использования неявного приведения типов, что может 
	// привести к нежелательным результатам - объясните (в комментариях), к каким?
	// Напишите явно преобразования, которые неявно выполняет компилятор

	iInt	=	257;
	cByte	=	iInt; // поскольку на char выделяется 8 бит, то при вводе 257, в переменную записывается кольцо вычетов

	unsigned char cN1=255, cN2=2, cSum;
	cSum = cN1 + cN2; // значение в переменной cSum = 257, но поскольку char имеет только 8 бит, то в переменную записывается кольцо вычетов

	//Сравните предыдущую строчку с приведенной ниже. Объясните (в комментариях),
	//почему в следующей строке не происходит выход за разрядную сетку
	// Напишите явно преобразования, которые неявно выполняет компилятор
	int iSum = cN1+cN2; // iSum =257, cSum = 1

	//Напишите, почему при сложении одинаковых значений (одинаковых в двоичной системе) 
	// в строках (1) и (2) получаются разные результаты
	// Напишите явно преобразования, которые неявно выполняет компилятор и объясните,
	// что при этом происходит
	char c1=0xff, c2=2; // [-128; 127]
	unsigned char uc1=0xff, uc2=2; // [0; 255]
	int iSum1= c1 + c2;   //iSum1 = (int)c1 + int(c2) = (-128 + 127) + 2 = (-1) + 2 = 1
	int iSum2= uc1 + uc2; //iSum = (int)uc1 + (int)uc2 = 255 + 2 = 257

	stop

	
// ***********************************************************
	//Задание 2b. Явное приведение типов данных.
	//Проинтерпретируйте результат (значения переменной dDouble) в строке (3)
	// Напишите явно преобразования, которые неявно выполняет компилятор
	int nTmp=100, nn=3;
	dDouble=3.3 + nTmp / nn; // (3) dDouble=3.3 + (double)nTmp / (double)nn;

	//Получите результат без потери точности с помощью оператора явного
	//приведения типа
	double dDouble3=3.3 + (double)nTmp / (double)nn; // (4)


	stop


// *******************************************************
	// Задание 3. Область действия, область видимости и
	//				время существования переменных

	//   В этом фрагменте фигурируют четыре переменных с одним и тем же именем 
	// nTwin - одна глобальная, вторая определена в своем пространстве имен, 
	// (определены выше в начале модуля) третья - локальная внутри функции main(), 
	// четвертая - вложенная локальная внутри блока. 
	//   В данном задании требуется в выделенных местах фрагмента определить, к какой 
	// из четырех переменных идет обращение, а также факт существования и видимости 
	// для всех четырех, заполнив приведенные в задании таблицы 
	//	Для выполнения задания рекомендуется пользоваться окнами "Locals" и "Watches"
	// Подсказка: - в окно "Watches" можно поместить как nTwin
	//			так и ::nTwin, впрочем как и TwinSpace::nTwin
	

	nTwin=100;
	TwinSpace::nTwin = 300;
	nTwin++;
	// Обратите внимание на небольшой "глюк" отладчика. Хотя локальная переменная nTwin
	// до следующей строки еще не определена (и формально даже не существует), но место
	// под нее в стеке функции main уже выделено (и там мусор). Если теперь в  окно 
	// "Watches" поместить просто nTwin, то отладчик будет показывать значение этой, еще 
	// не объявленной локальной переменной (что-то вроде -858993460 или 0xcccccccc), 
	// хотя должен формально показывать значение глобальной переменной, объявленной ранее.
	// Компилятор при этом все вычисляет верно.
	// Если надо увидеть именно значение глобальной переменной, то надо явно указать в окне
	// "Watches" глобальную область видимости, т.е. написать там ::nTwin.
	// Примечание: вот еще один аргумент за то, чтобы не создавать конфликты имен.
	int nTwin;
	nTwin=200;	
	::nTwin++;  
	{
		int nTwin;
		nTwin=-1;
		::nTwin++;
		TwinSpace::nTwin++;
	}

	nTwin--;


// *******************************************************
	// Задание 4. Спецификатор класса памяти - static
	// а) Для каждой итерации цикла напишите значения пременных nLocal# и nStatic#.
	// б) Напишите, когда выполняется инициализация обеих переменных?
	// в) Поясните (в комментарии) разницу между способом инициализации 
	//     переменных nStatic1 и nStatic2 и поясните побочный эффект, 
	//     влияющий на переменную nLocal2.

	for (int i=0; i<3; i++)
	{
		static int nStatic1 = 100;
		int nLocal1 = 100;
		int nLocal2 = 200;
		static int nStatic2 = nLocal2++ * 2;
		nStatic1++;
		nStatic2++;
		nLocal1++;
		stop

	}
	// Напишите:
	//   а) как изменилось поведение пременной nStatic1?
	//   б) как эта переменная ИНИЦИАЛИЗИРОВАНА ?
	for (int i=0; i<3; i++)
	{
		static int nStatic1;
		nStatic1 = 100;
		int nLocal1 = 100;
		nStatic1++;
		nLocal1++;
		stop

	}



// *******************************************************
	// Задание 5. Перечисления - enum
	// Обратите внимание на явную и неявную инициализацию констант
	// Выполняя задание по шагам, следите за значениями, которые
	// принимает переменная myColors


	enum eColors
	{
		BLACK,
		BLUE,
		GREEN,
		RED=5,
		YELLOW,
		WHITE=RED+4
	};
	
	eColors   myColors;	//объявление переменной типа eColors 
	myColors=BLACK;
	myColors=BLUE;
	myColors=GREEN;
	myColors=RED;
	myColors=YELLOW;
	myColors=WHITE;

	int nnn = BLACK; //любой целочисленной переменной можно присвоить
					 //значение из списка инициализирующих значений

	//Именованные константы можно использовать в выражениях:
	nnn = BLUE | YELLOW;

	//Раскомментируйте следующую строку и обратите
	//внимание на  ошибку при компиляции 
//	myColors = 1;	//модифицируйте выражение таким образом, чтобы компилятор не выдывал ошибки

	// Выполните следующее присваивание НЕ меняя перечисление и тип переменной myColors?
//	myColors = 123;
	stop


// *******************************************************
	// Задание 6.1 Логический тип bool
	// Выполняя задание по шагам, следите за значениями
	// переменной b и интерпретируйте результат. Напишите эти значения в комментариях

	int nNumber = 1;
	bool b = (nNumber != 0); //
	b = (nNumber == 0); //
	b = (nNumber > 0); //
	b = (nNumber > 1); //
	b = 5; //

	//Вы всегда можете преобразовать логическое значение к целому
	//явно или компилятор может это сделать самостоятельно (неявно)
	//Обратите внимание: как интерпретирует значения логических переменных компилятор?
	int tmp =  b + 1; //

	//Задание 6.2 В Григорианском календаре (которым мы все пользуемся) високосный год
	// определяется по следующему алгоритму: високосным является каждый четвертый год,
	// но каждый сотый високосным не является, при этом каждый 400-й год все таки 
	// високосный. Т.е. 1823 - не високосный, 1824 - високосный, 1900 - не високосный,
	// 2000 - високосный.
	// Напишите фрагмент кода, такой что:
	// логическая переменная isLeapYear принимает значение true, если год, заданный
	// переменной year - високосный.
	// Примечание: НЕ НАДО пользоваться операторами if-else, тернарным оператором и switch
	//             НАДО написать логическое выражение в одну строку.
	{
		int year = 1823;
		//int year = 1824;
		//int year = 1900;
		//int year = 2000;

		//Вычислили значение 
		//bool isLeapYear = 
		// проверили значение в отладчике
		stop
	}

// *******************************************************
	// Задание 7. Модификатор const и переменные

	{
		//Раскомментируйте следующие две строчки и объясните (в комментариях)
		//ошибки при компиляции 

		//	const int nN; //
		//	nN = 1; //
	}



// ********************************************************
	//Задание 8. Логические условные операторы и операторы отношения.

	//Задание 8.1 Напишите фрагмент кода, который переводит код символа, 
	//хранящийся в переменной ch в противоположный регистр.
	//Требуется предусмотреть проверку ситуации, когда пользователь ввел цифру
	//или нажал другую клавишу, которой символ не соответствует
	//Подсказка: работаем только с символами английского алфавита, для которого в таблице
	// кодов ASCII код каждой буквы нижнего регистра на 0x20 больше кода 
	// соответствующей буквы верхнего регистра.
	{
		// Сформируйте значение переменной ch с помощью потока ввода
		char ch ;
		
		//... изменили регистр
		// здесь проверили в отладчике значение или вывели "эхо" на экран
		stop
	}


	//Задание 8.2 Напишите фрагмент кода, который реализует с помощью if (if/else)
	//следующую логику: если x меньше или равен 0, y=0
	//если x больше 0 но меньше 1, то y=x,
	//если x больше или равен 1, то y=1
	//Подумайте: какого типа должны или могут быть x и y?
	{
	}

	//Задание 8.3 Напишите фрагмент кода, который реализует с помощью switch
	//следующую логику: в переменной cInput типа char дано значение символа,
	//введенного любым способом.
	//Если введен символ 'y' (т.е. yes) в любом регистре, то присвоить
	//переменной у значение переменной x
	//Если введен символ 'n' (т.е. no) в любом регистре, то присвоить
	//переменной у значение (x * 2)
	//Если любой другой симол, то вывести сообщение об ошибке
	{
		char ch;
		//сформировали значение
		//switch
	}
	// ********************************************************
	//Задание 9. Циклы.

	//Задание 9.1 Напишите фрагмент кода, который реализует с помощью for
	//следующую логику: найти сумму заданного диапазона целых чисел.
	//Введите границы с помощью потока ввода или с помощью средств отладки.
	//Предусмотрите защиту от ввода нижней границы больше, чем верхней.
	{
		
		//сформироыать границы диапазона
		int a, b, sm;
		//проверить корректность значений
		do
		{
			std::cout<< "Введите начало отсчёта (a): ";
			std::cin>>a;

			std::cout<< "Введите конец отсчёта (b): ";
			std::cin>>b;
		} while (b < a);
		// вычислить сумму
		for (int i = a; i <= b; i ++) {sm += i;};

		std::cout<< "sm = " << sm << std::endl;
		
		// проверить в отладчике значение
		stop
		
	}


	//Задание 9.2 Напишите фрагмент кода, который реализует с помощью do-while
	//следующую логику: на каждой итерации цикла ввести с консоли целое значение
	// и покинуть цикл, если значение удовлетворяет условию: 
	// значение больше или равно 10 и четное.
	//Замечание: проверка на четность с использованием операции остатка от деления
	//нацело генерирует очень неэффективный код. Попробуйте реализовать альтернативный
	//вариант.
	
	{
		int x, flag_even = 0;
		float x_f;

		do
		{
			std::cout<< "Введите число: ";
			std::cin>>x;

			for (int i = 10; i <= x; i += 2)
			{
				if (x - i == 0) {flag_even = 1; break;}
			};

		} while (x >= 10 && flag_even == 0);
		
		std::cout<< "\nФрагмент программы окончен." << std::endl;
	}

	//Задание 9.3 Напишите фрагмент кода, который реализует с помощью while
	//следующую логику: исходно int x = 0; 
	//на каждой итерации x=x+1, sum=sum+1/x
	//найти значение x, при котором sum>1.7
	#define FLT_EPSILON 1.192092896e-07F
	{
		int x = 0;
		float sum = 0;
		
		while (sum - 1.7f < FLT_EPSILON)
		{
			x++;
			sum += (1.f/x);
		};

		std::cout<< "sum = " << sum << std::endl;
		std::cout<< "x = " << x << std::endl;
	}
	return 0;//код завершения приложения
}	// Конец функции main()